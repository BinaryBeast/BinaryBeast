{"body":"# Binarybeast\r\n\r\nThis is a Ruby Gem to access the BinaryBeast.com API. It was extracted from the [Gamkoi.com](http://www.gamkoi.com) Source Code and was written by Crispin SchÃ¤ffler\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'binarybeast'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install binarybeast\r\n\r\n## Usage\r\n\r\n    @tourney = Binarybeast::Tourney.new\r\n\r\nthere are several options you can use when creating a tourney:\r\n\r\n    :title => String\r\n    :description => String\r\n    :public => Integer\r\n    :game_code => String\r\n    :type_id => Integer\r\n    :elimination => Integer\r\n    :team_mode => Integer\r\n    :group_count => Integer\r\n    :teams_from_group => Integer\r\n    :location => String\r\n    :max_teams => Integer\r\n    :replay_uploads => Integer\r\n    :replay_downloads => Integer\r\n    :auto_start => Integer\r\n    :return_data => Integer\r\n\r\nhowever, only :title => String is required for creating a new tourney object.\r\n\r\n## Create a new Tournament on BinaryBeast\r\n\r\n    @tourney = Binarybeast::Tourney.new(:title => \"Test Tournament\", :description => \"This comes from a ruby gem accessing your api.\")\r\n    @tourney.create\r\n    \r\n## Fetching a existing Tournament from BinaryBeast\r\n\r\n    @tourney = Binarybeast::Tourney.load(:id => \"xSC21212194\")\r\n\r\n## Current implemented Functions\r\n\r\nThis is a pre release of the gem soon to be. Current functions include\r\n\r\n    .new\r\n    .create\r\n    .update\r\n    .load\r\n    .delete\r\n    .setBuild\r\n    .setConfirmation\r\n    .start\r\n\r\nmore to come soon....\r\n\r\n## Some stuff you should know\r\n\r\n### Eigenclass: Tourney\r\n\r\nThere is an eigenclass of the Tourney Class. Functions are\r\n\r\n    .list\r\n    .listpopular\r\n    .load\r\n\r\n### :force => true\r\n\r\nThe BinaryBeast API sends back JSON from every request. However, if you use this gem we catch the JSON Data and proccess it. If you want to have a direct response from the API you can go with something like this:\r\n\r\n    @tourney = Binarybeast::Tourney.new(:title => \"Test\")\r\n    response = @tourney.create(:force => true)\r\n    \r\nthe :force => true tells the function to give you the callback from the binarybeast directly. The response is now a parsed hash, so this will work\r\n\r\n    response[\"Result\"]\r\n    => 200\r\n\r\nthe :force options is currently available to almost every function, the exception is Binarybeast::Tourney.new since this creates the ruby object and does not do an API Call.\r\n\r\n## Changelog\r\n\r\n### Version: 0.1.5.pre\r\n\r\n* Added list to eigenclass. It lists tourneys that you've created. Example: tourneys = Binarybeast::Tourney.list\r\n* Added listpopular to eigenclass. It lists popular tourney. Example: tourneys = Binarybeast::Tourney.listpopular\r\n\r\n### Version: 0.1.4.pre\r\n\r\n* Fixed a typo in some tests.\r\n\r\n### Version: 0.1.3.pre\r\n\r\n* Added Eigenclass to Tourney, so you can call Binarybeast::Tourney.load(:id => \"\").\r\n* Changed variable names to use underscore naming convention rather than all lower case naming.\r\n* Added a call function to the Binarybeast module. You are now able to call Binarybeast.call() to make a raw API call to Binarybeast. Returns a JSON parsed array.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Binarybeast","tagline":"Gem to access the BinaryBeast.com API with a Ruby Gem."}